using System.Net;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;

namespace BuberDinner.Api.Filters;

// Exception Handling Approach 2 - add Exception Filter to Controllers
public class ErrorHandlingFilterAttribute : ExceptionFilterAttribute
{
    // We apply this filter to all of our controllers
    // When exception is throw & not handled => invoke this OnException()
    public override void OnException(ExceptionContext context)
    {
        var exception = context.Exception;

        /*
        // set .Result => will be sent to the client
        // context.Result = new ObjectResult(new { error = "An error occurred." })
        var errorResult = new { error = "An error occurred." };

        context.Result = new ObjectResult(errorResult)
        {
            StatusCode = 500
        };
        */

        var problemDetails = new ProblemDetails
        {
            Type = "https://tools.ietf.org/html/rfc7231#section-6.6.1", // generated by co-pilot
            Instance = context.HttpContext.Request.Path,
            Status = (int)HttpStatusCode.InternalServerError,
            Detail = exception.Message,
            Title = "An error occurred while processing request."
        };

        context.Result = new ObjectResult(problemDetails);


        // set .ExceptionHandled = true
        context.ExceptionHandled = true;
    }
}